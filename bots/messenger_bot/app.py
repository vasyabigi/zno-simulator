# -*- coding: utf-8 -*-
import json
import requests
from flask import Flask, request
from pymessenger.bot import Bot
import tokenfile

app = Flask(__name__)
ACCESS_TOKEN = tokenfile.ACCESS_TOKEN
VERIFY_TOKEN = tokenfile.VERIFY_TOKEN
QUESTIONS_API_ROOT = tokenfile.QUESTIONS_API_ROOT

bot = Bot(ACCESS_TOKEN)


@app.route("/", methods=["GET", "POST"])
def receive_message():
    if request.method == "GET":
        token_sent = request.args["hub.verify_token"]
        return verify_fb_token(token_sent)
    else:
        output = request.get_json()
        for event in output["entry"]:
            messaging = event["messaging"]
            for message in messaging:
                if message.get("postback"):
                    messaging_postback(message)
                if message.get("message"):
                    messaging_message(message)
                payload = (
                    message.get("message", {}).get("quick_reply", {}).get("payload")
                )
                if payload:
                    messaging_payload(message, payload)
        return "Message Processed"


def messaging_postback(message):
    if (
        message.get("postback").get("payload") == "start_button"
        or message.get("postback").get("payload") == "help"
    ):
        recipient_id = message["sender"]["id"]
        response = "–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è - –Ω–∞–∂–º–∏ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–Ω–æ–ø–∫—É –∞–±–æ –Ω–∞–¥—Ä—É–∫—É–π *–ù–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è*.\n\n–î–∞–ª—ñ –≤ —Ç–µ–±–µ —Ç–∞–∫—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏: –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—à–µ –ø–∏—Ç–∞–Ω–Ω—è —á–∏ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ —Ü–µ.\n–ü—ñ—Å–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ - –¥—ñ–∑–Ω–∞—î—à—Å—è —á–∏ –≤–æ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞. –Ø–∫—â–æ —Ç–∞–∫,—Ç–æ –ø—Ä–∏ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ, –∑'—è–≤–∏—Ç—å—Å—è –ø–æ—è—Å–Ω–µ–Ω–Ω—è –¥–æ –ø–∏—Ç–∞–Ω–Ω—è —ñ –ø–µ—Ä–µ–π–¥–µ—à –¥–æ –Ω–æ–≤–æ–≥–æ.\n–Ø–∫—â–æ –∂ –Ω—ñ - –º–æ–∂–µ—à —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É, –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞–±–æ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ —ñ–Ω—à–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è.\n\n–î–ª—è –≤–∏–±–æ—Ä—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –π–æ–≥–æ –ø–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä. \n–ü–∏—Ç–∞–Ω–Ω—è –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏ –º–∞—é—Ç—å –Ω–æ–º–µ—Ä–∏ 1 —ñ –¥–∞–ª—ñ,  –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ - 2591 —ñ –¥–∞–ª—ñ, —ñ—Å—Ç–æ—Ä—ñ—ó - 3448, –≥–µ–æ–≥—Ä–∞—Ñ—ñ—ó - 5276, –±—ñ–æ–ª–æ–≥—ñ—ó - 6710, —Ñ—ñ–∑–∏–∫–∏ - 8090 —ñ —Ö—ñ–º—ñ—ó - 9083."
        button_title = {
            "start_button": "–ü–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è",
            "help": "–ù–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è",
        }
        buttons = [
            {
                "content_type": "text",
                "title": button_title[message.get("postback").get("payload")],
                "payload": json.dumps({"id": 0, "is_correct": "nothing"}),
            },
        ]
        action = "typing_on"
        bot.send_action(recipient_id, action)
        bot.send_message(
            recipient_id, message={"text": response, "quick_replies": buttons},
        )


def messaging_message(message):
    recipient_id = message["sender"]["id"]
    if message["message"].get("text") == "–î–æ–ø–æ–º–æ–≥–∞":  # quick reply
        response = "–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è - –Ω–∞–∂–º–∏ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–Ω–æ–ø–∫—É –∞–±–æ –Ω–∞–¥—Ä—É–∫—É–π *–ù–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è*.\n\n–î–∞–ª—ñ –≤ —Ç–µ–±–µ —Ç–∞–∫—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏: –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—à–µ –ø–∏—Ç–∞–Ω–Ω—è —á–∏ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ —Ü–µ.\n–ü—ñ—Å–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ - –¥—ñ–∑–Ω–∞—î—à—Å—è —á–∏ –≤–æ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞. –Ø–∫—â–æ —Ç–∞–∫,—Ç–æ –ø—Ä–∏ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ, –∑'—è–≤–∏—Ç—å—Å—è –ø–æ—è—Å–Ω–µ–Ω–Ω—è –¥–æ –ø–∏—Ç–∞–Ω–Ω—è —ñ –ø–µ—Ä–µ–π–¥–µ—à –¥–æ –Ω–æ–≤–æ–≥–æ.\n–Ø–∫—â–æ –∂ –Ω—ñ - –º–æ–∂–µ—à —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É, –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞–±–æ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ —ñ–Ω—à–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è.\n\n–î–ª—è –≤–∏–±–æ—Ä—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –π–æ–≥–æ –ø–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä. \n–ü–∏—Ç–∞–Ω–Ω—è –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏ –º–∞—é—Ç—å –Ω–æ–º–µ—Ä–∏ 1 —ñ –¥–∞–ª—ñ,  –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ - 2591 —ñ –¥–∞–ª—ñ, —ñ—Å—Ç–æ—Ä—ñ—ó - 3448, –≥–µ–æ–≥—Ä–∞—Ñ—ñ—ó - 5276, –±—ñ–æ–ª–æ–≥—ñ—ó - 6710, —Ñ—ñ–∑–∏–∫–∏ - 8090 —ñ —Ö—ñ–º—ñ—ó - 9083."
        buttons = [
            {
                "content_type": "text",
                "title": "–ù–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è",
                "payload": json.dumps({"id": 0, "is_correct": "nothing"}),
            },
        ]
        action = "typing_on"
        bot.send_action(recipient_id, action)
        bot.send_message(
            recipient_id, message={"text": response, "quick_replies": buttons},
        )
    elif (
        message["message"].get("text") == "–ù–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è"
        or message["message"].get("text") == "–ü–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"
    ):
        id_or_random_question(recipient_id)
    elif (
        message["message"].get("text") is not None
        and message["message"].get("text").isdigit()
    ):
        id_or_random_question(recipient_id, int(message["message"].get("text")))
    elif message["message"].get("text") not in (
        "–ê",
        "–ë",
        "–í",
        "–ì",
        "–î",
        "–ù–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è",
        "–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –∑–Ω–æ–≤—É",
        "–ü–æ—è—Å–Ω–µ–Ω–Ω—è",
        "–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å",
        "–î–æ–ø–æ–º–æ–≥–∞",
    ):
        response = f'*–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–Ω–æ–ø–∫–∏! –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è:* {message["message"].get("text")}'
        send_message(recipient_id, response)


def messaging_payload(message, payload):
    #  print(f"PAYLOAD: {payload}")
    returned_payload = json.loads(payload)
    if returned_payload["is_correct"] == "True":
        get_all_page = requests.get(f'{QUESTIONS_API_ROOT}/{returned_payload["id"]}')
        i_question = json.loads(get_all_page.content)
        if i_question["explanation"]:
            response = f'üí™ –¢–≤–æ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å *–≤—ñ—Ä–Ω–∞*. \n{i_question["explanation"]} \n–°–ø—Ä–æ–±—É–π –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ —Ü–µ –ø–∏—Ç–∞–Ω–Ω—è.'
        else:
            response = f"üí™ –¢–≤–æ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å *–≤—ñ—Ä–Ω–∞*. –°–ø—Ä–æ–±—É–π –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ —Ü–µ –ø–∏—Ç–∞–Ω–Ω—è."
        recipient_id = message["sender"]["id"]
        send_message(recipient_id, response)
        id_or_random_question(recipient_id)
    elif returned_payload["is_correct"] == "False":
        response = f"–¢–≤–æ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å *–Ω–µ –≤—ñ—Ä–Ω–∞*. –í–∏–±–µ—Ä–∏ –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é."
        recipient_id = message["sender"]["id"]
        send_message(recipient_id, response)
        payload = {
            "id": returned_payload["id"],
            "is_correct": "False_answer_again",
        }
        dumps = json.dumps(payload)
        get_all_page = requests.get(f'{QUESTIONS_API_ROOT}/{returned_payload["id"]}')
        i_question = json.loads(get_all_page.content)
        if i_question["explanation"]:
            button_title = "–ü–æ—è—Å–Ω–µ–Ω–Ω—è"
        else:
            button_title = "–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"
        buttons = [
            {"content_type": "text", "title": "–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –∑–Ω–æ–≤—É", "payload": dumps},
            {
                "content_type": "text",
                "title": "–ù–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è",
                "payload": json.dumps(
                    {"id": returned_payload["id"], "is_correct": "False_get_new"}
                ),
            },
        ]
        buttons.append(
            {
                "content_type": "text",
                "title": button_title,
                "payload": json.dumps(
                    {
                        "id": returned_payload["id"],
                        "is_correct": "False_get_explanation",
                    }
                ),
            }
        )
        bot.send_message(
            recipient_id, message={"text": "*–í–∏–±–µ—Ä–∏ –¥—ñ—é:*", "quick_replies": buttons},
        )
    elif returned_payload["is_correct"] == "False_answer_again":
        # print(f'False_answer_again - ID: {returned_payload["id"]}')
        recipient_id = message["sender"]["id"]
        id_or_random_question(recipient_id, returned_payload["id"])

    elif returned_payload["is_correct"] == "False_get_explanation":
        # print(f'False_get_explanation - ID: {returned_payload["id"]}')
        recipient_id = message["sender"]["id"]
        get_all_page = requests.get(f'{QUESTIONS_API_ROOT}/{returned_payload["id"]}')
        i_question = json.loads(get_all_page.content)
        if i_question.get("explanation"):
            send_message(recipient_id, i_question["explanation"])
        else:
            for choice in i_question["choices"]:
                if choice["is_correct"]:
                    message = f'*–ü—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –Ω–æ–º–µ—Ä {returned_payload["id"]}:*\n{choice["content"]}'
            send_message(recipient_id, message)
        id_or_random_question(recipient_id)


def verify_fb_token(token_sent):
    if token_sent == VERIFY_TOKEN:
        return request.args["hub.challenge"]
    else:
        return "Invalid verification token"


def send_message(recipient_id, response):
    bot.send_text_message(recipient_id, response)
    return "Success"


def id_or_random_question(recipient_id, q_id_or_random_q_subject="ukr"):
    if q_id_or_random_q_subject is not None and type(q_id_or_random_q_subject) is int:
        get_all_page = requests.get(
            f"{QUESTIONS_API_ROOT}/{q_id_or_random_q_subject}"
        )  # ?&format=raw
        #  print('IF DIGIT')
    else:
        get_all_page = requests.get(
            f"{QUESTIONS_API_ROOT}/random?subject={q_id_or_random_q_subject}"
        )
        #  print('IF RANDOM')
    #  print(f'GET ALL PAGE: {get_all_page}')
    action = "typing_on"
    bot.send_action(recipient_id, action)
    i_question = json.loads(get_all_page.content)
    #  print(f"I_QUESTION: {i_question}")
    instance_full_question = i_question
    #  print(f"instance_full_question: {instance_full_question}")
    #  print(f'IMAGE here is: {instance_full_question.get("image")}')
    if instance_full_question.get("statusCode"):
        i_id = q_id_or_random_q_subject
        response = f"–ù–∞ –∂–∞–ª—å, –ø–∏—Ç–∞–Ω–Ω—è {i_id} –≤—ñ–¥—Å—É—Ç–Ω—î –∞–±–æ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ. –í–∏–±–µ—Ä–∏ *–ù–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è* –∞–±–æ –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä\n"
        buttons = []
        buttons.append(
            {
                "content_type": "text",
                "title": "–ù–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è",
                "payload": json.dumps({"id": i_id, "is_correct": "nothing"}),
            },
        )
        bot.send_message(
            recipient_id, message={"text": response, "quick_replies": buttons},
        )
    else:
        if instance_full_question.get("image") is not None:
            print(f'image image{instance_full_question.get("image")}')
            bot.send_image_url(recipient_id, instance_full_question["image"])
        display = f'{instance_full_question["content"]}\n\n'
        i_id = instance_full_question["id"]
        for choices in instance_full_question["choices"]:
            if len(choices["content"]) == 1:
                display = f"–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —Ä–∏—Å—É–Ω–∫—É"
            else:
                display += f'{choices["content"]}\n'
        response_sent_text = f" *–ü–∏—Ç–∞–Ω–Ω—è –Ω–æ–º–µ—Ä {i_id}*\n{display}"
        buttons = []
        for i in range(len(instance_full_question["choices"])):
            button_example = {
                "content_type": "text",
                "title": instance_full_question["choices"][i]["content"].replace(
                    "*", ""
                )[0],
                "payload": json.dumps(
                    {
                        "id": i_id,
                        "is_correct": str(
                            instance_full_question["choices"][i]["is_correct"]
                        ),
                    }
                ),
            }
            buttons.append(button_example)
        buttons.append(
            {
                "content_type": "text",
                "title": "–ù–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è",
                "payload": json.dumps({"id": i_id, "is_correct": "nothing"}),
            },
        )
        if i_question["explanation"]:
            button_title = "–ü–æ—è—Å–Ω–µ–Ω–Ω—è"
        else:
            button_title = "–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"
        buttons.append(
            {
                "content_type": "text",
                "title": button_title,
                "payload": json.dumps(
                    {"id": i_id, "is_correct": "False_get_explanation"}
                ),
            },
        )
        print(buttons)
        bot.send_message(
            recipient_id,
            message={"text": response_sent_text, "quick_replies": buttons},
        )


if __name__ == "__main__":
    app.run(debug=True)
