version: 2
jobs:
  build:
    docker:
      - image: circleci/python:3.7.4
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: Run Linters
          command: |
            . venv/bin/activate
            flake8 . --exclude venv --count --select=E901,E999,F821,F822,F823 --show-source --statistics --output-file test-reports
            flake8 . --exclude venv --count --max-complexity=10 --max-line-length=120 --statistics --output-file test-reports
      - store_artifacts:
          path: test-reports
          destination: test-reports
  deploy:
    docker:
      - image: circleci/python:3.7.4
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:
          name: Deploy API using Elastic Beanstalk
          command: |
            . venv/bin/activate
            pip install awsebcli
            cd api
            mkdir .elasticbeanstalk
            cp elasticbeanstalk.yml .elasticbeanstalk/config.yml
            eb deploy zno-dev
  deploy_telegram:
    docker:
      - image: circleci/node:9.10.1
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Deploy Telegram Bot using Serverless
          command: |
            cd bot
            sudo npm i -g serverless
            npm install
            serverless deploy

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          context: AWS (Essence)
          filters:
            branches:
              only: master
      - deploy_telegram:
          requires:
            - build
          context: AWS (Essence)
          filters:
            branches:
              only: master
